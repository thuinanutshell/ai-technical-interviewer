"""Add Resume.user_id

Revision ID: f7ea79e3a4ce
Revises:
Create Date: 2025-07-11 08:17:54.894654

"""

from typing import Sequence, Union
import sqlmodel
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f7ea79e3a4ce"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("Feedback", sa.Column("interview_id", sa.Uuid(), nullable=False))
    op.alter_column(
        "Feedback",
        "tone_summary",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Feedback",
        "speech_rate",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        nullable=True,
    )
    op.alter_column(
        "Feedback",
        "overall_feedback",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        nullable=False,
    )
    op.alter_column(
        "Feedback",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.create_unique_constraint(None, "Feedback", ["interview_id"])
    op.drop_constraint(op.f("Feedback_id_fkey"), "Feedback", type_="foreignkey")
    op.create_foreign_key(None, "Feedback", "Interview", ["interview_id"], ["id"])
    op.drop_table_comment(
        "Feedback",
        existing_comment="Stores the feedback for the session as a whole",
        schema=None,
    )
    op.add_column("Interview", sa.Column("user_id", sa.Uuid(), nullable=False))
    op.alter_column(
        "Interview",
        "title",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Interview",
        "context",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Interview",
        "interview_type",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Interview",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("Session_id_fkey"), "Interview", type_="foreignkey")
    op.create_foreign_key(None, "Interview", "User", ["user_id"], ["id"])
    op.drop_table_comment(
        "Interview",
        existing_comment="Stores a complete mock interview session for a user that includes the initial context (coding question description or parsed resume data)",
        schema=None,
    )
    op.add_column("Message", sa.Column("interview_id", sa.Uuid(), nullable=False))
    op.alter_column(
        "Message",
        "role",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Message",
        "content",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Message",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("Message_id_fkey"), "Message", type_="foreignkey")
    op.create_foreign_key(None, "Message", "Interview", ["interview_id"], ["id"])
    op.add_column("Question", sa.Column("interview_id", sa.Uuid(), nullable=False))
    op.alter_column(
        "Question",
        "description",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Question",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("Question_description_key"), "Question", type_="unique")
    op.drop_constraint(op.f("Question_id_fkey"), "Question", type_="foreignkey")
    op.create_foreign_key(None, "Question", "Interview", ["interview_id"], ["id"])
    op.drop_table_comment(
        "Question",
        existing_comment="A question bank that stores all questions (both coding and behavioral). The type field indicates whether the question is behavioral, tree, dynamic programming, etc.",
        schema=None,
    )
    op.add_column("Resume", sa.Column("user_id", sa.Uuid(), nullable=False))
    op.alter_column(
        "Resume",
        "parsed_data",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "Resume",
        "pdf_url",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=True,
    )
    op.alter_column(
        "Resume",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("Resume_id_fkey"), "Resume", type_="foreignkey")
    op.create_foreign_key(None, "Resume", "User", ["user_id"], ["id"])
    op.drop_table_comment(
        "Resume",
        existing_comment="A simple table to store a user's resume data",
        schema=None,
    )
    op.alter_column(
        "User",
        "email",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "User",
        "username",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(length=255),
        existing_nullable=False,
    )
    op.alter_column(
        "User",
        "hashed_password",
        existing_type=sa.TEXT(),
        type_=sqlmodel.sql.sqltypes.AutoString(),
        existing_nullable=False,
    )
    op.alter_column(
        "User",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=sa.DateTime(),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("User_email_key"), "User", type_="unique")
    op.drop_constraint(op.f("User_username_key"), "User", type_="unique")
    op.create_index(op.f("ix_User_email"), "User", ["email"], unique=False)
    op.create_index(op.f("ix_User_username"), "User", ["username"], unique=False)
    op.drop_table_comment(
        "User", existing_comment="Stores basic user personal information", schema=None
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table_comment(
        "User",
        "Stores basic user personal information",
        existing_comment=None,
        schema=None,
    )
    op.drop_index(op.f("ix_User_username"), table_name="User")
    op.drop_index(op.f("ix_User_email"), table_name="User")
    op.create_unique_constraint(
        op.f("User_username_key"),
        "User",
        ["username"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_unique_constraint(
        op.f("User_email_key"), "User", ["email"], postgresql_nulls_not_distinct=False
    )
    op.alter_column(
        "User",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "User",
        "hashed_password",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "User",
        "username",
        existing_type=sqlmodel.sql.sqltypes.AutoString(length=255),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "User",
        "email",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.create_table_comment(
        "Resume",
        "A simple table to store a user's resume data",
        existing_comment=None,
        schema=None,
    )
    op.drop_constraint(None, "Resume", type_="foreignkey")
    op.create_foreign_key(op.f("Resume_id_fkey"), "Resume", "User", ["id"], ["id"])
    op.alter_column(
        "Resume",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "Resume",
        "pdf_url",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "Resume",
        "parsed_data",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("Resume", "user_id")
    op.create_table_comment(
        "Question",
        "A question bank that stores all questions (both coding and behavioral). The type field indicates whether the question is behavioral, tree, dynamic programming, etc.",
        existing_comment=None,
        schema=None,
    )
    op.drop_constraint(None, "Question", type_="foreignkey")
    op.create_foreign_key(
        op.f("Question_id_fkey"), "Question", "Interview", ["id"], ["id"]
    )
    op.create_unique_constraint(
        op.f("Question_description_key"),
        "Question",
        ["description"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "Question",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "Question",
        "description",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("Question", "interview_id")
    op.drop_constraint(None, "Message", type_="foreignkey")
    op.create_foreign_key(
        op.f("Message_id_fkey"), "Message", "Interview", ["id"], ["id"]
    )
    op.alter_column(
        "Message",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "Message",
        "content",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "Message",
        "role",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("Message", "interview_id")
    op.create_table_comment(
        "Interview",
        "Stores a complete mock interview session for a user that includes the initial context (coding question description or parsed resume data)",
        existing_comment=None,
        schema=None,
    )
    op.drop_constraint(None, "Interview", type_="foreignkey")
    op.create_foreign_key(op.f("Session_id_fkey"), "Interview", "User", ["id"], ["id"])
    op.alter_column(
        "Interview",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "Interview",
        "interview_type",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "Interview",
        "context",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.alter_column(
        "Interview",
        "title",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("Interview", "user_id")
    op.create_table_comment(
        "Feedback",
        "Stores the feedback for the session as a whole",
        existing_comment=None,
        schema=None,
    )
    op.drop_constraint(None, "Feedback", type_="foreignkey")
    op.create_foreign_key(
        op.f("Feedback_id_fkey"), "Feedback", "Interview", ["id"], ["id"]
    )
    op.drop_constraint(None, "Feedback", type_="unique")
    op.alter_column(
        "Feedback",
        "created_at",
        existing_type=sa.DateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "Feedback",
        "overall_feedback",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        nullable=True,
    )
    op.alter_column(
        "Feedback",
        "speech_rate",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        nullable=False,
    )
    op.alter_column(
        "Feedback",
        "tone_summary",
        existing_type=sqlmodel.sql.sqltypes.AutoString(),
        type_=sa.TEXT(),
        existing_nullable=False,
    )
    op.drop_column("Feedback", "interview_id")
    # ### end Alembic commands ###
